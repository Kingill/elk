input {
    exec {
	# cible 
	# command => "/opt/mqm/samp/bin/amqsmon -m PROTO -t statistics"
	command => 'su mqm -c "/opt/mqm/samp/bin/amqsmon -m PROTO -t statistics"'
	# test
	# command => "cat /tmp/elastic/STATMQ"
	interval => 60 # en secondes
	type => "ystatmq"
	id   => "ystatmqid"
	codec => multiline {
	    pattern => "(QueueStatistics:\s+\d+)|(\d+ Records* Processed.)"
	    negate => true
	    what => "next"
	    # si QueueStatistics*, fait partie de l'évènement suivant
	    # sinon évènement multi courant
	}
    }
}

filter {
        if [type] == "ystatmq" { # if utile car logstash a un seul pipeline
            mutate {
                # trim
                strip => [ "message"]
		# tease
            }
	    grok {
		break_on_match => false
		named_captures_only => true
	        overwrite => [ "queuename", "mindepth" ]
	        match => { 
		# capture typique  de chaîne :
		#  "QueueManager:\s+'(?<queuemanager>[^']+)'",
		# capture typique d'entier :
		# "QMaxDepth:\s+(?<maxdepth>\d+)",
		# 2 entiers :
		# "PutCount:\s+\[(?<putpsistcount>\d+), (?<putnpsistcount>\d+)\]"
		     message => [
			 # header
			 "QueueManager:\s+'(?<queuemanager>[^']+)'",
			 "IntervalStartDate:\s+'(?<intervalstartdate>[^']+)'",
			 "IntervalStartTime:\s+'(?<intervalstarttime>[^']+)'",
			 "IntervalEndDate:\s+'(?<intervalenddate>[^']+)'",
			 "IntervalEndTime:\s+'(?<intervalendtime>[^']+)'",
			 "^CommandLevel:\s+(?<commandlevel>\d+)",
			 "^ObjectCount:\s+(?<objectcount>\d+)" 
		    ]
		}
	        match => { 
		    message => [
			 # items
			 "QueueName:\s+'(?<queuename>[^']+)'",
			 "QMinDepth:\s+(?<mindepth>\d+)",
			 "QMaxDepth:\s+(?<maxdepth>\d+)",
			 "AverageQueueTime:\s+\[(?<avgqtimenpsist>\d+), (?<avgqtimepsist>\d+)\]",
			 "PutCount:\s+\[(?<putpsistcount>\d+), (?<putnpsistcount>\d+)\]",
			 "PutFailCount:\s+(?<putfailcount>\d+)" ,
			 "Put1Count:\s+\[(?<put1psistcount>\d+), (?<put1npsistcount>\d+)\]",
			 "Put1FailCount:\s+(?<put1failcount>\d+)", 
			 "PutBytes:\s+\[(?<putbytesnpsist>\d+), (?<putbytespsist>\d+)\]",
			 "GetCount:\s+\[(?<getpsistcount>\d+), (?<getnpsistcount>\d+)\]",
			 "GetBytes:\s+\[(?<getbytesnpsist>\d+), (?<getbytespsist>\d+)\]",
			 "GetFailCount:\s+(?<getfailcount>\d+)" ,
			 "BrowseCount:\s+\[(?<bropsistcount>\d+), (?<bronpsistcount>\d+)\]",
			 "BrowseBytes:\s+\[(?<brobytesnpsist>\d+), (?<brobytespsist>\d+)\]",
			 "BrowseFailCount:\s+(?<brofailcount>\d+)" ,
			 "NonQueuedMsgCount:\s+(?<nqmsgcount>\d+)" ,
			 "ExpiredMsgCount:\s+(?<expiremsgcount>\d+)" ,
			 "PurgeCount:\s+(?<purgecount>\d+)"
		    ]
		}
		# remove_field => [ "queuename", "mindepth" ]
		# add_tag => [ "dedans" ]
	    }
	    if [queuemanager] {
	    # code ruby pour ajouter un champ qui tagge l'évènement
	    # comme étant de la même série que tous les autres évènements 
	    # du filtre. Pour qu'aggregate "comprenne" que les champs de
	    # l'en tête (nom QM, etc.) sont valables pour toutes les
	    # files
		ruby {
		    code => '
			event.set("qmvu","vu")
		    '
		}
		aggregate {
		    # code => "map['qmname']=event.get('queuemanager')"
		    code => "
			map['qmname']=event.get('queuemanager')
			map['intervalstartdate']=event.get('intervalstartdate')
			map['intervalstarttime']=event.get('intervalstarttime')
			map['intervalenddate']=event.get('intervalenddate')
			map['intervalendtime']=event.get('intervalendtime')
			map['commandlevel']=event.get('commandlevel')
			map['objectcount']=event.get('objectcount')
		    "
		    task_id => "%{qmvu}"
		}
	    }
	    if[queuename] {
	    # code ruby pour ajouter un champ qui tagge l'évènement
	    # comme étant de la même série que tous les autres évènements 
	    # du filtre. Pour qu'aggregate "comprenne" ...
		ruby {
		    code => '
			event.set("qmvu","vu")
		    '
		}
		aggregate {
		    # code => "event.set('qmname', map['qmname'])"
		    code => "
			event.set('qmname', map['qmname'])
			event.set('intervalstartdate', map['intervalstartdate'])
			event.set('intervalstarttime', map['intervalstarttime'])
			event.set('intervalenddate', map['intervalenddate'])
			event.set('intervalendtime', map['intervalendtime'])
			event.set('commandlevel', map['commandlevel'])
			event.set('objectcount', map['objectcount'])
		    "
		    task_id => "%{qmvu}"
		}
	    }
	    else {
		drop {}
	    }
	    if[purgecount] { # dernier champ des évènements queue
		mutate {
		    remove_field => [ "message", "qmvu" ]
		}
	    }
        }
	else {
	    grok {
		add_tag => [ "dehors" ]
	    }
	}
}

output {
    elasticsearch {
	hosts => ["http://lxpt0017pv:9200"]
	user => ["elastic"]
	password => ["changeme"]
	index => "ystatmqidx-%{+YYYY-MM-dd}"
	# template => "/etc/logstash/template_ystatmqidx.json"
    }
    # debug : 
    stdout { codec => json }
    # stdout { codec => rubydebug }
}
